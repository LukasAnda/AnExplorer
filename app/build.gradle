buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/'}
    }
    dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:0.11.2'
    }
}
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

repositories {
    maven { url 'https://maven.google.com' }
}

apply plugin: 'com.android.application'


def props = new Properties()
File keystoreProperties = rootProject.file("keystore.properties")
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
} else {
    props['keystorefile'] = 'none';
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.2'

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode
            outputFileName = "${parent.name}-${variant.name}-${variant.versionName}-${output.getFilter(com.android.build.OutputFile.ABI)}.apk"
        }
    }

    defaultConfig {
        versionName "3.9"
        versionCode = 83
        minSdkVersion 21
        targetSdkVersion 28
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "LICENSE_KEY",  "$props.LICENSE_KEY"
        buildConfigField "String", "DROPBOX_CLIENT_ID",  "$props.DROPBOX_CLIENT_ID"
        buildConfigField "String", "DROPBOX_CLIENT_KEY",  "$props.DROPBOX_CLIENT_KEY"
        buildConfigField "String", "ONEDRIVE_CLIENT_ID",  "$props.ONEDRIVE_CLIENT_ID"
        buildConfigField "String", "ONEDRIVE_CLIENT_KEY",  "$props.ONEDRIVE_CLIENT_KEY"
        buildConfigField "String", "BOX_CLIENT_ID",  "$props.BOX_CLIENT_ID"
        buildConfigField "String", "BOX_CLIENT_KEY",  "$props.BOX_CLIENT_KEY"
        buildConfigField "String", "PLAYSTORE_LICENSE_KEY",  "$props.PLAYSTORE_LICENSE_KEY"
        buildConfigField "String", "MERCHANT_ID",  "$props.MERCHANT_ID"

        manifestPlaceholders = [
                onesignal_app_id: "ece1c165-3716-46d6-95f6-eb8df048b331",
                onesignal_google_project_number: 'REMOTE'
        ]

        multiDexEnabled true

    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]


    signingConfigs {
        release
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    flavorDimensions "release", "default"
    productFlavors {
        free {
            applicationId "com.tproductions.Openit"
            dimension "default"
            buildConfigField "String", "GOOGLE_DRIVE_CLIENT_ID",  "$props.GOOGLE_DRIVE_CLIENT_ID"
        }
        pro {
            applicationId "com.tproductions.Openit.pro"
            dimension "default"
            buildConfigField "String", "GOOGLE_DRIVE_CLIENT_ID",  "$props.GOOGLE_DRIVE_PRO_CLIENT_ID"
        }
        google {
            dimension "release"
        }
        amazon {
            dimension "release"
        }
        other {
            dimension "release"
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name

        if (names.contains("underground") && (names.contains("google") || names.contains("other"))) {
            variant.ignore = true
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.jaredrummler:android-processes:1.1.1'
    implementation 'com.github.mjdev:libaums:0.5.5'
    implementation 'org.apache.ftpserver:ftpserver-core:1.1.1'
    implementation 'commons-net:commons-net:3.6'
    implementation 'com.zsoltsafrany:needle:1.0.0'
    implementation 'com.cloudrail:cloudrail-si-android:2.21.6'
    
    implementation 'androidx.appcompat:appcompat:1.0.0-rc02'
    implementation 'androidx.cardview:cardview:1.0.0-rc02'
    implementation 'com.google.android.material:material:1.0.0-rc02'
    implementation 'androidx.exifinterface:exifinterface:1.0.0-rc02'
    implementation 'androidx.browser:browser:1.0.0-rc02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.github.javiersantos:AppUpdater:2.6.5'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.github.blackfizz:eazegraph:1.2.2@aar'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'me.grantland:autofittextview:0.2.1'

    implementation 'com.romandanylyk:pageindicatorview:1.0.2'

    implementation 'com.onesignal:OneSignal:3.10.1'

    implementation 'com.github.ayoubfletcher.GDPR-Admob-Android:consentsdk:0.1.7'

    freeImplementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'
    freeImplementation "com.google.firebase:firebase-core:16.0.3"
    freeImplementation "com.google.firebase:firebase-ads:15.0.1"
    freeImplementation 'com.anjlab.android.iab.v3:library:1.0.44'
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'

}

android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
android.signingConfigs.release.storePassword props.storePassword
android.signingConfigs.release.keyAlias props.keyAlias
android.signingConfigs.release.keyPassword props.keyPassword

if (getGradle().getStartParameter().getTaskRequests().toString().contains("Free")) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}
